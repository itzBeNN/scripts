// ==UserScript==
// @name         Calcular Leves - Players
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  Calcula Leves e insere a info diretamente na Div dos Recursos ap√≥s o Ferro/Iron no relat√≥rio, recolhendo as coordenadas corretas de destino e preenchendo o campo na Pra√ßa de Reuni√µes ao redirecionar para l√°.
// @author       - BeNN
// @include      *tribalwars.com.pt/*&screen=report&mode*
// @include      *tribalwars.com.pt/*&screen=place*
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    // Fun√ß√£o para obter o valor num√©rico de um elemento (remover separadores de milhares)
    function parseResourceValue(resourceText) {
        if (!resourceText || resourceText.trim() === '') {
            console.error('Texto de recurso vazio ou inv√°lido:', resourceText);
            return 0;
        }
        const parsedValue = parseInt(resourceText.replace(/\./g, '').trim());
        if (isNaN(parsedValue)) {
            console.error('Falha ao parsear o valor de recurso:', resourceText);
            return 0;
        }
        return parsedValue;
    }

    // Fun√ß√£o para buscar as coordenadas de destino (√∫ltima ocorr√™ncia no link relevante)
    function extractCoordinatesFromDestination() {
        const destinationLinks = document.querySelectorAll('a[href*="screen=info_village"]'); // Seleciona todos os links com "screen=info_village"
        if (destinationLinks.length > 1) {
            const destinationLink = destinationLinks[destinationLinks.length - 1]; // Pega o √∫ltimo link (destino)
            const match = destinationLink.textContent.match(/\((\d+\|\d+)\)/); // Busca padr√£o (XXX|YYY)
            if (match) {
                return match[1]; // Retorna apenas XXX|YYY
            }
        }
        console.error('Coordenadas de destino n√£o encontradas no √∫ltimo link relevante');
        return '';
    }

    // Fun√ß√£o para preencher automaticamente o campo de coordenadas na Pra√ßa de Reuni√µes
    function fillCoordinatesInPlacePage(coordinates) {
        const inputField = document.querySelector('input[name="input"]'); // Seleciona o campo de coordenadas
        if (inputField && coordinates) {
            inputField.value = coordinates; // Preenche o campo com as coordenadas
            console.log(`Coordenadas preenchidas automaticamente: ${coordinates}`);
        } else {
            console.error('N√£o foi poss√≠vel preencher as coordenadas na Pra√ßa de Reuni√µes');
        }
    }

    // Fun√ß√£o para inserir as Leves diretamente ap√≥s o Ferro/Iron como link clic√°vel
    function insertClickableLeves(message, coordinates) {
        // Criar o elemento clic√°vel
        const levesLink = document.createElement('a');
        levesLink.style.marginLeft = '10px'; // Pequeno espa√ßamento ap√≥s o "Ferro/Iron"
        levesLink.style.color = '#fff'; // Texto branco para dark mode
        levesLink.style.backgroundColor = '#333'; // Fundo escuro para combinar com o tema
        levesLink.style.padding = '3px 6px'; // Espa√ßamento interno para visibilidade
        levesLink.style.borderRadius = '4px'; // Bordas arredondadas
        levesLink.style.fontSize = '12px'; // Tamanho de fonte ajustado
        levesLink.style.textDecoration = 'none'; // Remover sublinhado no link
        levesLink.textContent = `üê¥ ${message}`;

        // Criar o URL de redirecionamento com as Leves e coordenadas
        const villageId = new URLSearchParams(window.location.search).get('village'); // Extrair ID da aldeia
        if (villageId && coordinates) {
            levesLink.href = `/game.php?village=${villageId}&screen=place&light=${message}`; // URL para a p√°gina de envio com o n√∫mero de Leves
            levesLink.onclick = () => {
                localStorage.setItem('destinationCoordinates', coordinates); // Salva as coordenadas para serem usadas na Pra√ßa de Reuni√µes
            };
        } else {
            console.error('ID da aldeia ou coordenadas n√£o encontrados. Redirecionamento inv√°lido.');
            levesLink.href = '#'; // Link vazio se algo estiver faltando
        }

        // Selecionar o elemento "Ferro/Iron" e inserir o link ap√≥s ele
        const ironElement = document.querySelector('#attack_spy_resources td span.icon.header.iron');
        if (ironElement && ironElement.parentElement) {
            ironElement.parentElement.appendChild(levesLink); // Adicionar o link diretamente ap√≥s o "Ferro/Iron"
        } else {
            console.error('Elemento "Ferro/Iron" n√£o encontrado. N√£o foi poss√≠vel inserir o link de Leves.');
        }
    }

    // Detec√ß√£o autom√°tica na p√°gina da Pra√ßa de Reuni√µes
    if (window.location.href.includes('screen=place')) {
        const savedCoordinates = localStorage.getItem('destinationCoordinates'); // Recupera as coordenadas salvas
        fillCoordinatesInPlacePage(savedCoordinates); // Preenche o campo de coordenadas
        localStorage.removeItem('destinationCoordinates'); // Remove as coordenadas ap√≥s o uso
    } else {
        // Selecionar a tabela de recursos encontrados
        const resourceTable = document.querySelector('#attack_spy_resources');
        if (resourceTable) {
            try {
                console.log('Tabela de Recursos encontrada!', resourceTable);

                // Inicializar vari√°veis
                let wood = 0, stone = 0, iron = 0;

                // Buscar recursos dentro dos spans dentro da c√©lula
                const resourceCells = resourceTable.querySelectorAll('td span.nowrap');
                resourceCells.forEach(cell => {
                    const cellText = cell.textContent.trim();
                    console.log('Texto do recurso:', cellText);
                    if (cell.querySelector('.icon.header.wood')) {
                        wood = parseResourceValue(cellText);
                    } else if (cell.querySelector('.icon.header.stone')) {
                        stone = parseResourceValue(cellText);
                    } else if (cell.querySelector('.icon.header.iron')) {
                        iron = parseResourceValue(cellText);
                    }
                });

                console.log('Recursos encontrados:', { madeira: wood, argila: stone, ferro: iron });

                // Somar os valores dos recursos
                const totalResources = wood + stone + iron;

                console.log("Total de Recursos:", totalResources);

                // Extrair coordenadas do link de destino
                const coordinates = extractCoordinatesFromDestination();
                console.log("Coordenadas extra√≠das:", coordinates);

                // Calcular as Leves necess√°rias
                const levesRequired = Math.ceil(totalResources / 80);
                insertClickableLeves(`${levesRequired}`, coordinates);
            } catch (error) {
                console.error('Erro ao processar os recursos ou extrair coordenadas:', error);
                insertClickableLeves('Erro ao calcular', '');
            }
        } else {
            console.error('Tabela de Recursos (#attack_spy_resources) n√£o encontrada!');
            insertClickableLeves('Tabela n√£o encontrada', '');
        }
    }
})();
